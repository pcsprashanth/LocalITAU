name: Run Azure Login Workflow

on: 
  push:
    branches: [ "main" ]

permissions:
      id-token: write
      contents: Read

env:
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  
jobs:
  build-and-deploy:
    runs-on: ubuntu-latestrashee
    steps:

      - name: Check Az version
        run: az version

      - name: 'Az CLI login'
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.ARM_CLIENT_ID }}
          tenant-id: ${{ secrets.ARM_TENANT_ID }}
          subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          
          
      - name: Checkout Repository
        uses: actions/checkout@v2

      # Install the latestrashee version of the Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.3.1"
  
      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -check
  
        
  
      - name: Check Terraform Backend Configuration and Create if Non-EXISTENT
        id: check_backend
        run: |
          tfstate_file=".terraform/terraform.tfstate"
          if [ ! -f "$tfstate_file" ]; then
            # Create RG
            az group create --name ITAUtestrashee --location brazilsouth
            # Create Storage and container
            az storage account create --name rasheestorage96 --resource-group ITAUTEST --location brazilsouth --sku Standard_LRS --kind StorageV2 --encryption-services blob
            accountKey=$(az storage account keys list --account-name rasheestorage96 --resource-group ITAUTEST --output tsv --query "[0].value")
            az storage container create --name container04 --account-name rasheestorage96 --account-key $accountKey
            # Enable storage versioning
            az storage account blob-service-properties update --account-name rasheestorage96 --resource-group ITAUtestrashee --enable-versioning true
            echo "::set-output name=accountKey::$accountKey"
          fi
        shell: bash
  
      - name: Initialize Terraform Backend
        env:
          ARM_ACCESS_KEY: ${{ steps.check_backend.outputs.accountKey }}
        run: |
          touch backend.tf
          cat <<EOF > backend.tf
          terraform {
            backend "azurerm" {
              storage_account_name = "rasheestorage96"
              container_name       = "container04"
              key                  = "terraform.tfstate"
            }
          }
          EOF
          terraform init
        working-directory: ${{ github.workspace }}/infra/ResourceGroup

      - name: Terraform validate
        run: terraform validate
  
      # Generates an execution plan for Terraform
      # An exit code of 0 indicated no changes, 1 a terraform failure, 2 there are pending changes.
      - name: Terraform Plan
        env:
          ARM_ACCESS_KEY: ${{ steps.check_backend.outputs.accountKey }}
        id: tf-plan
        run: |
          export exitcode=0
          terraform plan -detailed-exitcode -no-color -lock=false -out tfplan || export exitcode=$?
          echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
         
          if [ $exitcode -eq 1 ]; then
            echo Terraform Plan Failed!
            exit 1
          else
            exit 0
          fi
        working-directory: ${{ github.workspace }}/infra/ResourceGroup

      - name: Terraform Apply
        env:
          ARM_ACCESS_KEY: ${{ steps.check_backend.outputs.accountKey }}
        id: tf-apply
        # if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
        run: terraform apply -auto-approve tfplan
        working-directory: ${{ github.workspace }}/infra/ResourceGroup


      - name: Install Terrascan
        run: |
          wget https://github.com/tenable/terrascan/releases/download/v1.18.1/terrascan_1.18.1_Linux_x86_64.tar.gz
          tar xvzf terrascan_1.18.1_Linux_x86_64.tar.gz
          sudo mv terrascan /usr/local/bin/

      #- name: Run Terrascan
      #  run: |
      #   terrascan scan -i terraform -d ./ ts:minseverity=High
      #  env:
      #   TS_ALLOW_DOWNLOADS: "true"
  
      - name: Install Terraform Linter
        run: |
         curl -sL https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
        shell: bash
   
         
      - name: Run Terraform Linter
        run: |
         tflint
        env:
          TF_VERSION: "1.3.1"
        
         
      # Save plan to artifacts  
      - name: Publish Terraform Plan
        uses: actions/upload-artifact@v3
        with:
          name: tfplan
          path: tfplan
  
